# Zachary Robin
# HW9 
# CSCI 169
# Dr. Linnell


# Part 1 
Jonathon's article "Don't be Scared of Functional Programming" is a great piece that provides an overview of functional programming and it's many benefits. Throughout the article, you are taken through a functional program that is broken down step by step with analysis. I found it interesting that Scala and functional programing languages alike have made a recent comeback but moreover, that they ever had a time when they weren't as popular. The performance benefits and reliability that Jonathon talks about in the article make it seem obvious that this language would be beneficial for a multitude of projects. Between the Immutability and Stateless design of all functional programs, a reliable language is created. I didn't know that functional programs had to be stateless, that is, in layman terms the language s ignorant of any previous code. Furthermore, I did not know that in functional programming all functions have to return a single value as well as take in a single value. I guess this makes sense due to the recursive nature of these languages. 

object part2 {
    def main(args: Array[String]): Unit = {
      // PART 1
      println("PART1")

      def main(args:Array[String]){
        val t = new Node(5, Leaf, Leaf)
        val t2 = t.insert(3).insert(7).insert(6).insert(2).insert(1)
        println(t2.toString)//toString included to help with debugging.


      }

      abstract class BSTree{ //Can't be instantiated - can't make an object of type BSTree.
        //CAN have variable whose type is BSTree, but the object it references will be a Leaf or Node
        def member(x: Int): Boolean//Tells us if x is in the BSTree
        def insert(x: Int): BSTree//creates a new tree that is the same as this one, but with x added
        def equal(other:BSTree):Boolean//Returns true if the two trees have identical values and structure, false o/w
        //def merge(other:BSTree): BSTree//Creates a new tree which contains all elements of this and of other
      }


      case object Leaf extends BSTree{//"object" means we only create one Leaf object - but this is OK because we can have as many references to it as we like.
        def member(x: Int): Boolean = false//Nothing is in the empty tree
        def insert(x: Int): BSTree = new Node(x, Leaf, Leaf)
        def equal(other:BSTree):Boolean = {
          this==other
        }
        /*
        def equal(other:BSTree):Boolean = {
         other match{
             case Leaf => true
             case Node(_, _, _) => false//_ don't care
           }
        }
        */
        def depth:Int = 0
        override def toString = "."

        def exactSubtree(that:BSTree):Boolean = {
          that match{
            case Leaf => false
            case Node(v,l,r) =>
              if (Value==v) ((Left exactSubtree l) && (Right exactSubtree r))
              else if (Value<v) this exactSubtree l
              else this exactSubtree r

          }
      }

      case class Node(value: Int, left: BSTree, right: BSTree) extends BSTree{
        def member(x: Int): Boolean = {
          if(value == x) true
          else if(x<value) left.member(x)
          else right member x
        }


        def insert(x:Int):BSTree = {//creates a new tree that is the same as this one, but with x added
          //No duplicates
          if(x<value)new Node(value, left.insert(x), right)       //Return type is boolean.  Recursion - recurse down both left and right or just one?
          else if (x>value)new Node(value, left, right insert x)
          else this//new Node(left, right)
        }
        def equal(other:BSTree):Boolean = {
          other match{
            case Leaf => false
            case Node(v, l, r) =>  (value==v) && (left equal l) &&  (right equal r)
          }

        }
        /*
        def insert(x:Int):BSTree = {//creates a new tree that is the same as this one, but with x added
          //No duplicates
          if(this member x) this
          else if(x<value)new Node(value, left.insert(x), right)       //recurse left//Recursion - recurse down both left and right or just one?
          else new Node(value, left, right insert x)

        }
         */
        override def toString = "{"+left.toString+value.toString+right.toString+"}"
      }

      // NEW CODE!!
      // Depth traversal
      def depth:Int ={
        if(Left.depth > Right.depth) Left +1
        else Right +1
        }
      }

      //exact Subtree



      println("End of Code.")
    }
}


object part3 {
  println("PART 3")

  def findLast(xs:List[Int], x:Int):Int = {
    def fun(xs:List[Int], x:Int, i:Int):Int ={
      xs.head match{
        case Nil => if (i==0)  -1 else i
        case y::ys => if(y==x) fun(ys,x,i+1)
        else fun(ys,x,i)
    }
    }
    fun(xs,x,0)
  }

  println("End of Code")
}


object part4 {
  println("PART 4")


  class Set(f:Int=>Boolean){
    def contains(x:Int):Boolean=f(x)
    def or (t:Set):Set = new Set(y=>this.contains(y) || t.contains(y))
    def and (t:Set):Set = new Set(y=>this.contains(y) && t.contains(y))
    def - (t:Set):Set = new Set(y=>this.contains(y) && !t.contains(y))
    def filter(p:Int=>Boolean):Set = new Set(y=>this.contains(y) && p(y))
    def forall(p:Int=>Boolean):Boolean = {
      def fun(i:Int):Boolean = {
        if(i >=1000) true
        else if (this.contains(i) && !p(i)) false
        else fun(i+1);
      }
      fun(-1000)
    }
  }
  // part a
  class singletonSet(elem:Int) extends Set(f:Int=>Boolean){
    def singletonSet(elem:Int):Int => Boolean = z=>z == elem
    override def forall(p:Int=>Boolean):Boolean = if(this.contains(elem) && p(elem)) true
    else false
  }

  // part b
  def subs[T<:Set](s:T, ss:List[T]):List[T] = {
    ss match {
      case x::xs => if(s.forall(x))x::subs(s,xs)
      else subs(s,xs)
      case Nil => Nil
    }
  }


  println("End of Code")
}
